{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ESMDAPY esmdapy is a program Purpose SPOTPY is a Python framework that enables the use of Computational optimization techniques for calibration, uncertainty and sensitivity analysis techniques of almost every (environmental-) model. The package is puplished in the open source journal PLoS One: Houska, T., Kraft, P., Chamorro-Chavez, A. and Breuer, L.: SPOTting Model Parameters Using a Ready-Made Python Package, PLoS ONE, 10(12), e0145180, doi:10.1371/journal.pone.0145180 , 2015 The simplicity and flexibility enables the use and test of different algorithms without the need of complex codes: sampler = spotpy.algorithms.sceua(model_setup()) # Initialize your model with a setup file sampler.sample(10000) # Run the model results = sampler.getdata() # Load the results spotpy.analyser.plot_parametertrace(results) # Show the results Features Complex algorithms bring complex tasks to link them with a model. We want to make this task as easy as possible. Some features you can use with the SPOTPY package are:","title":"Welcome to ESMDAPY"},{"location":"#welcome-to-esmdapy","text":"esmdapy is a program","title":"Welcome to ESMDAPY"},{"location":"#purpose","text":"SPOTPY is a Python framework that enables the use of Computational optimization techniques for calibration, uncertainty and sensitivity analysis techniques of almost every (environmental-) model. The package is puplished in the open source journal PLoS One: Houska, T., Kraft, P., Chamorro-Chavez, A. and Breuer, L.: SPOTting Model Parameters Using a Ready-Made Python Package, PLoS ONE, 10(12), e0145180, doi:10.1371/journal.pone.0145180 , 2015 The simplicity and flexibility enables the use and test of different algorithms without the need of complex codes: sampler = spotpy.algorithms.sceua(model_setup()) # Initialize your model with a setup file sampler.sample(10000) # Run the model results = sampler.getdata() # Load the results spotpy.analyser.plot_parametertrace(results) # Show the results","title":"Purpose"},{"location":"#features","text":"Complex algorithms bring complex tasks to link them with a model. We want to make this task as easy as possible. Some features you can use with the SPOTPY package are:","title":"Features"},{"location":"theory/","text":"The Rosenbrock Before we start to calibrate a real model, we start with some numerical optimization problems. They are all about finding the optima, just like a model. We start here with a simple two dimensional (parameter) function: The Rosenbrock (aka. Banana), which your might already know from the. The Rosenbrock function is defined as: $$f_{Rosen}(x,y) = (100(y - x^2)^2 + (1-x)^2$$ where we defined control variables as -10 < x < 10 and -10 < y < 10 , with f(x=1,y=1) = 0","title":"Theory"},{"location":"theory/#the-rosenbrock","text":"Before we start to calibrate a real model, we start with some numerical optimization problems. They are all about finding the optima, just like a model. We start here with a simple two dimensional (parameter) function: The Rosenbrock (aka. Banana), which your might already know from the. The Rosenbrock function is defined as: $$f_{Rosen}(x,y) = (100(y - x^2)^2 + (1-x)^2$$ where we defined control variables as -10 < x < 10 and -10 < y < 10 , with f(x=1,y=1) = 0","title":"The Rosenbrock"}]}